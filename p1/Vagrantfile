#CONTROLLER_NODE_TOKEN=$(sudo cat /var/lib/rancher/k3s/server/node-token) 
SERVER_NODE_TOKEN="shared/node-token"

#Ressources 

# https://stackoverflow.com/questions/43492322/vagrant-was-unable-to-mount-virtualbox-shared-folders 
# https://www.vagrantup.com/docs/synced-folders/basic_usage.html
# https://stackoverflow.com/questions/66449289/is-there-any-way-to-bind-k3s-flannel-to-another-interface


# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/buster64"
  config.vm.provider "virtualbox" do |vb| 
    vb.cpus = "1" 
    vb.memory = "512" 
  end
  config.vm.define "server" do |server|
      server.vm.hostname = "lusehair"
      server.vm.network :private_network, ip: "192.168.56.110", virtual_box__intnet: "eth1" 
      server.vm.synced_folder ".", "/vagrant", disabled: false
      server.vm.provision "shell", inline: <<-SHELL 
        # sudo apt-get update
        # sudo apt-get install -y curl apt-transport-https
        # curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        # echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
        # sudo apt-get update
        # sudo apt-get install -y kubectl
        curl -sfL https://get.k3s.io | INSTALL_k3S_EXEC="--flannel-iface=eth1" K3S_KUBECONFIG_MODE="644" sh -
        sleep 10
        sudo cat /var/lib/rancher/k3s/server/node-token > /home/vagrant/node-token
        SHELL
  end
  config.vm.define "worker" do |worker|
    worker.vm.hostname = "lusehairSW"
    worker.vm.network :private_network, ip: "192.168.56.111",virtual_box__intnet: "eth1"
    worker.vm.provision "shell", inline: <<-SHELL 
      # sudo apt-get update
      # sudo apt-get install -y curl apt-transport-https
      # curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      # echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
      # sudo apt-get update
      # sudo apt-get install -y kubectl
      curl -sfL https://get.k3s.io | K3S_URL=https://192.58.56.110:6443 INSTALL_k3S_EXEC=" --flannel-iface=eth1" K3S_TOKEN=SERVER_NODE_TOKEN 
      #K3S_TOKEN=<CONTROLLER_NODE_TOKEN> sh -
    SHELL
  end 
 
end


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
